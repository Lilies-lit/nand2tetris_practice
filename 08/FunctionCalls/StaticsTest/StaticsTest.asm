@256
D=A
@SP
M=D
@Sys.init_RETADDRESS_J0
D=A
@SP
A=M
M=D
@SP
M=M+1
@1
D=M
@SP
A=M
M=D
@SP
M=M+1
@2
D=M
@SP
A=M
M=D
@SP
M=M+1
@3
D=M
@SP
A=M
M=D
@SP
M=M+1
@4
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.init
0;JMP
(Sys.init_RETADDRESS_J0)
// init end //
// ----- // This file is part of www.nand2tetris.org
// ----- // and the book "The Elements of Computing Systems"
// ----- // by Nisan and Schocken, MIT Press.
// ----- // File name: projects/08/FunctionCalls/StaticsTest/Class1.vm
// ----- 
// ----- // Stores two supplied arguments in static[0] and static[1].
// ----- function Class1.set 0
(Class1.set)
// ----- push argument 0
@ARG
D=M
@0
D=D+A
A=D
D=M
@SP
A=M
M=D
@SP
M=M+1
// ----- pop static 0
@SP
M=M-1
A=M
D=M
@Class1.vm.0
M=D
// ----- push argument 1
@ARG
D=M
@1
D=D+A
A=D
D=M
@SP
A=M
M=D
@SP
M=M+1
// ----- pop static 1
@SP
M=M-1
A=M
D=M
@Class1.vm.1
M=D
// ----- push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// ----- return
@LCL
D=M
@5
D=D-A
@R15
M=D
A=M
D=M
@R13
M=D
@SP
M=M-1
A=M
D=M
@ARG
A=M
M=D
@ARG
A=M
A=A+1
D=A
@SP
M=D
@R15
M=M+1
A=M
D=M
@LCL
M=D
@R15
M=M+1
A=M
D=M
@ARG
M=D
@R15
M=M+1
A=M
D=M
@THIS
M=D
@R15
M=M+1
A=M
D=M
@THAT
M=D
@R13
A=M
0;JMP
// ----- 
// ----- // Returns static[0] - static[1].
// ----- function Class1.get 0
(Class1.get)
// ----- push static 0
@Class1.vm.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// ----- push static 1
@Class1.vm.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// ----- sub
@SP
M=M-1
A=M
D=M
D=-D
@SP
M=M-1
A=M
D=D+M
M=D
@SP
M=M+1
// ----- return
@LCL
D=M
@5
D=D-A
@R15
M=D
A=M
D=M
@R13
M=D
@SP
M=M-1
A=M
D=M
@ARG
A=M
M=D
@ARG
A=M
A=A+1
D=A
@SP
M=D
@R15
M=M+1
A=M
D=M
@LCL
M=D
@R15
M=M+1
A=M
D=M
@ARG
M=D
@R15
M=M+1
A=M
D=M
@THIS
M=D
@R15
M=M+1
A=M
D=M
@THAT
M=D
@R13
A=M
0;JMP
// ----- // This file is part of www.nand2tetris.org
// ----- // and the book "The Elements of Computing Systems"
// ----- // by Nisan and Schocken, MIT Press.
// ----- // File name: projects/08/FunctionCalls/StaticsTest/Class2.vm
// ----- 
// ----- // Stores two supplied arguments in static[0] and static[1].
// ----- function Class2.set 0
(Class2.set)
// ----- push argument 0
@ARG
D=M
@0
D=D+A
A=D
D=M
@SP
A=M
M=D
@SP
M=M+1
// ----- pop static 0
@SP
M=M-1
A=M
D=M
@Class2.vm.0
M=D
// ----- push argument 1
@ARG
D=M
@1
D=D+A
A=D
D=M
@SP
A=M
M=D
@SP
M=M+1
// ----- pop static 1
@SP
M=M-1
A=M
D=M
@Class2.vm.1
M=D
// ----- push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// ----- return
@LCL
D=M
@5
D=D-A
@R15
M=D
A=M
D=M
@R13
M=D
@SP
M=M-1
A=M
D=M
@ARG
A=M
M=D
@ARG
A=M
A=A+1
D=A
@SP
M=D
@R15
M=M+1
A=M
D=M
@LCL
M=D
@R15
M=M+1
A=M
D=M
@ARG
M=D
@R15
M=M+1
A=M
D=M
@THIS
M=D
@R15
M=M+1
A=M
D=M
@THAT
M=D
@R13
A=M
0;JMP
// ----- 
// ----- // Returns static[0] - static[1].
// ----- function Class2.get 0
(Class2.get)
// ----- push static 0
@Class2.vm.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// ----- push static 1
@Class2.vm.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// ----- sub
@SP
M=M-1
A=M
D=M
D=-D
@SP
M=M-1
A=M
D=D+M
M=D
@SP
M=M+1
// ----- return
@LCL
D=M
@5
D=D-A
@R15
M=D
A=M
D=M
@R13
M=D
@SP
M=M-1
A=M
D=M
@ARG
A=M
M=D
@ARG
A=M
A=A+1
D=A
@SP
M=D
@R15
M=M+1
A=M
D=M
@LCL
M=D
@R15
M=M+1
A=M
D=M
@ARG
M=D
@R15
M=M+1
A=M
D=M
@THIS
M=D
@R15
M=M+1
A=M
D=M
@THAT
M=D
@R13
A=M
0;JMP
// ----- // This file is part of www.nand2tetris.org
// ----- // and the book "The Elements of Computing Systems"
// ----- // by Nisan and Schocken, MIT Press.
// ----- // File name: projects/08/FunctionCalls/StaticsTest/Sys.vm
// ----- 
// ----- // Tests that different functions, stored in two different
// ----- // class files, manipulate the static segment correctly.
// ----- function Sys.init 0
(Sys.init)
// ----- push constant 6
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// ----- push constant 8
@8
D=A
@SP
A=M
M=D
@SP
M=M+1
// ----- call Class1.set 2
@Class1.set_RETADDRESS_J1
D=A
@SP
A=M
M=D
@SP
M=M+1
@1
D=M
@SP
A=M
M=D
@SP
M=M+1
@2
D=M
@SP
A=M
M=D
@SP
M=M+1
@3
D=M
@SP
A=M
M=D
@SP
M=M+1
@4
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
D=D-1
D=D-1
@ARG
M=D
@SP
D=M
@LCL
M=D
@Class1.set
0;JMP
(Class1.set_RETADDRESS_J1)
// ----- pop temp 0 // Dumps the return value
@SP
M=M-1
A=M
D=M
@5
M=D
// ----- push constant 23
@23
D=A
@SP
A=M
M=D
@SP
M=M+1
// ----- push constant 15
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// ----- call Class2.set 2
@Class2.set_RETADDRESS_J2
D=A
@SP
A=M
M=D
@SP
M=M+1
@1
D=M
@SP
A=M
M=D
@SP
M=M+1
@2
D=M
@SP
A=M
M=D
@SP
M=M+1
@3
D=M
@SP
A=M
M=D
@SP
M=M+1
@4
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
D=D-1
D=D-1
@ARG
M=D
@SP
D=M
@LCL
M=D
@Class2.set
0;JMP
(Class2.set_RETADDRESS_J2)
// ----- pop temp 0 // Dumps the return value
@SP
M=M-1
A=M
D=M
@5
M=D
// ----- call Class1.get 0
@Class1.get_RETADDRESS_J3
D=A
@SP
A=M
M=D
@SP
M=M+1
@1
D=M
@SP
A=M
M=D
@SP
M=M+1
@2
D=M
@SP
A=M
M=D
@SP
M=M+1
@3
D=M
@SP
A=M
M=D
@SP
M=M+1
@4
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Class1.get
0;JMP
(Class1.get_RETADDRESS_J3)
// ----- call Class2.get 0
@Class2.get_RETADDRESS_J4
D=A
@SP
A=M
M=D
@SP
M=M+1
@1
D=M
@SP
A=M
M=D
@SP
M=M+1
@2
D=M
@SP
A=M
M=D
@SP
M=M+1
@3
D=M
@SP
A=M
M=D
@SP
M=M+1
@4
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Class2.get
0;JMP
(Class2.get_RETADDRESS_J4)
// ----- label WHILE
(WHILE)
// ----- goto WHILE
@WHILE
0;JMP
